{"ast":null,"code":"export const formatDecimal = num => num % 1 > 0 ? parseFloat(num).toFixed(2) : num;\nexport const formatNumber = num => {\n  const isDecimal = num % 1 > 0;\n  const isSingleDigit = Math.round(num) < 10;\n  return isSingleDigit && isDecimal ? formatDecimal(num) : Math.round(num);\n};\nexport const formatShortNumber = num => {\n  if (num > 999999) {\n    return formatNumber(num / 1000000) + 'M';\n  } else if (num > 999) {\n    return formatNumber(num / 1000) + 'K';\n  } else {\n    return num;\n  }\n};\nexport const formatCurrency = num => Math.round(num).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\nexport const formatPercentage = (part, whole) => `${part && whole ? Math.round(part / whole * 100) : 0}%`;\nexport const formatSeconds = seconds => {\n  var _ref;\n  return (_ref = Math.round(seconds) % 60) === null || _ref === void 0 ? void 0 : _ref.toString().padStart(2, '0');\n};\nexport const formatTimer = (minutes, seconds) => `${minutes}:${formatSeconds(seconds)}`;","map":{"version":3,"names":["formatDecimal","num","parseFloat","toFixed","formatNumber","isDecimal","isSingleDigit","Math","round","formatShortNumber","formatCurrency","toString","replace","formatPercentage","part","whole","formatSeconds","seconds","padStart","formatTimer","minutes"],"sources":["D:/Development/Esfands/Overlays/overlays/events/src/util/formatters.js"],"sourcesContent":["export const formatDecimal = (num) =>\n  num % 1 > 0 ? parseFloat(num).toFixed(2) : num;\n\nexport const formatNumber = (num) => {\n  const isDecimal = num % 1 > 0;\n  const isSingleDigit = Math.round(num) < 10;\n\n  return isSingleDigit && isDecimal ? formatDecimal(num) : Math.round(num);\n};\n\nexport const formatShortNumber = (num) => {\n  if (num > 999999) {\n    return formatNumber(num / 1000000) + 'M';\n  } else if (num > 999) {\n    return formatNumber(num / 1000) + 'K';\n  } else {\n    return num;\n  }\n};\n\nexport const formatCurrency = (num) =>\n  Math.round(num)\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nexport const formatPercentage = (part, whole) =>\n  `${part && whole ? Math.round((part / whole) * 100) : 0}%`;\n\nexport const formatSeconds = (seconds) =>\n  (Math.round(seconds) % 60)?.toString().padStart(2, '0');\n\nexport const formatTimer = (minutes, seconds) =>\n  `${minutes}:${formatSeconds(seconds)}`;\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,GAAG,IAC/BA,GAAG,GAAG,CAAC,GAAG,CAAC,GAAGC,UAAU,CAACD,GAAG,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,GAAGF,GAAG;AAEhD,OAAO,MAAMG,YAAY,GAAIH,GAAG,IAAK;EACnC,MAAMI,SAAS,GAAGJ,GAAG,GAAG,CAAC,GAAG,CAAC;EAC7B,MAAMK,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACP,GAAG,CAAC,GAAG,EAAE;EAE1C,OAAOK,aAAa,IAAID,SAAS,GAAGL,aAAa,CAACC,GAAG,CAAC,GAAGM,IAAI,CAACC,KAAK,CAACP,GAAG,CAAC;AAC1E,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAIR,GAAG,IAAK;EACxC,IAAIA,GAAG,GAAG,MAAM,EAAE;IAChB,OAAOG,YAAY,CAACH,GAAG,GAAG,OAAO,CAAC,GAAG,GAAG;EAC1C,CAAC,MAAM,IAAIA,GAAG,GAAG,GAAG,EAAE;IACpB,OAAOG,YAAY,CAACH,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG;EACvC,CAAC,MAAM;IACL,OAAOA,GAAG;EACZ;AACF,CAAC;AAED,OAAO,MAAMS,cAAc,GAAIT,GAAG,IAChCM,IAAI,CAACC,KAAK,CAACP,GAAG,CAAC,CACZU,QAAQ,EAAE,CACVC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;AAE1C,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAI,EAAEC,KAAK,KACzC,GAAED,IAAI,IAAIC,KAAK,GAAGR,IAAI,CAACC,KAAK,CAAEM,IAAI,GAAGC,KAAK,GAAI,GAAG,CAAC,GAAG,CAAE,GAAE;AAE5D,OAAO,MAAMC,aAAa,GAAIC,OAAO;EAAA;EAAA,eAClCV,IAAI,CAACC,KAAK,CAACS,OAAO,CAAC,GAAG,EAAE,yCAAzB,KAA4BN,QAAQ,EAAE,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AAAA;AAEzD,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAO,EAAEH,OAAO,KACzC,GAAEG,OAAQ,IAAGJ,aAAa,CAACC,OAAO,CAAE,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}